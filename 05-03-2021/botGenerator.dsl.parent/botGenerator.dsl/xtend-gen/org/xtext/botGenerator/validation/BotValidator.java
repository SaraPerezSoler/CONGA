/**
 * generated by Xtext 2.19.0
 */
package org.xtext.botGenerator.validation;

import java.util.regex.Pattern;
import org.eclipse.xtext.validation.Check;
import org.xtext.botGenerator.validation.AbstractBotValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class BotValidator extends AbstractBotValidator {
  @Check
  public void checkHTTTPRequestTokenDataKey(final /* HTTPRequestToke */Object httpRequestToken) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field HTTPReturnType is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\ntype cannot be resolved"
      + "\n!= cannot be resolved"
      + "\nDATA cannot be resolved"
      + "\n&& cannot be resolved"
      + "\ndataKey cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nHTTP_REQUEST_TOKE__DATA_KEY cannot be resolved");
  }
  
  @Check
  public void checkParameterReferences(final /* ParameterReferenceToken */Object references) {
    throw new Error("Unresolved compilation problems:"
      + "\nTrainingPhrase cannot be resolved to a type."
      + "\nIntent cannot be resolved to a type."
      + "\nIntent cannot be resolved to a type."
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\nparameters cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\nparameter cannot be resolved"
      + "\n! cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nPARAMETER_REFERENCE_TOKEN__PARAMETER cannot be resolved");
  }
  
  @Check
  public void flowPath(final /* Bot */Object bot) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nflows cannot be resolved"
      + "\nsize cannot be resolved"
      + "\nflows cannot be resolved"
      + "\nget cannot be resolved"
      + "\nflows cannot be resolved"
      + "\nsize cannot be resolved"
      + "\nflows cannot be resolved"
      + "\nget cannot be resolved"
      + "\nintent cannot be resolved"
      + "\n=== cannot be resolved"
      + "\nintent cannot be resolved"
      + "\nintent cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nBOT__FLOWS cannot be resolved");
  }
  
  @Check
  public void flowPathState(final /* BotInteraction */Object state) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\noutcoming cannot be resolved"
      + "\nsize cannot be resolved"
      + "\noutcoming cannot be resolved"
      + "\nget cannot be resolved"
      + "\noutcoming cannot be resolved"
      + "\nsize cannot be resolved"
      + "\noutcoming cannot be resolved"
      + "\nget cannot be resolved"
      + "\nintent cannot be resolved"
      + "\n=== cannot be resolved"
      + "\nintent cannot be resolved"
      + "\nintent cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nBOT_INTERACTION__OUTCOMING cannot be resolved");
  }
  
  @Check
  public void nameUnique(final /* Element */Object e) {
    throw new Error("Unresolved compilation problems:"
      + "\nBot cannot be resolved to a type."
      + "\nElement cannot be resolved to a type."
      + "\nElement cannot be resolved to a type."
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\nintents cannot be resolved"
      + "\nactions cannot be resolved"
      + "\nentities cannot be resolved"
      + "\nequals cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequals cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nELEMENT__NAME cannot be resolved");
  }
  
  @Check
  public void nameUnique(final /* Parameter */Object param) {
    throw new Error("Unresolved compilation problems:"
      + "\nIntent cannot be resolved to a type."
      + "\nParameter cannot be resolved to a type."
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\nparameters cannot be resolved"
      + "\nequals cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequals cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nELEMENT__NAME cannot be resolved");
  }
  
  @Check
  public void nameUnique(final /* SimpleInput */Object input) {
    throw new Error("Unresolved compilation problems:"
      + "\nLanguageInput cannot be resolved to a type."
      + "\nEntityInput cannot be resolved to a type."
      + "\nSimpleInput cannot be resolved to a type."
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nequals cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nname cannot be resolved"
      + "\nequals cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nELEMENT__NAME cannot be resolved");
  }
  
  @Check
  public void paramEntity(final /* Parameter */Object param) {
    throw new Error("Unresolved compilation problems:"
      + "\nIntent cannot be resolved to a type."
      + "\nPromptLanguage cannot be resolved to a type."
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field GeneratorFactory is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nentity cannot be resolved"
      + "\n=== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\ndefaultEntity cannot be resolved"
      + "\n=== cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\nparameters cannot be resolved"
      + "\nindexOf cannot be resolved"
      + "\n== cannot be resolved"
      + "\nparameters cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n- cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nPARAMETER__ENTITY cannot be resolved"
      + "\nparameters cannot be resolved"
      + "\nget cannot be resolved"
      + "\n+ cannot be resolved"
      + "\nentity cannot be resolved"
      + "\n!== cannot be resolved"
      + "\n|| cannot be resolved"
      + "\ndefaultEntity cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nentity cannot be resolved"
      + "\nentity cannot be resolved"
      + "\ndefaultEntity cannot be resolved"
      + "\ndefaultEntity cannot be resolved"
      + "\nisList cannot be resolved"
      + "\nisList cannot be resolved"
      + "\nrequired cannot be resolved"
      + "\nisRequired cannot be resolved"
      + "\nprompts cannot be resolved"
      + "\neINSTANCE cannot be resolved"
      + "\ncreatePromptLanguage cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nprompts cannot be resolved"
      + "\nprompts cannot be resolved"
      + "\nadd cannot be resolved"
      + "\nprompts cannot be resolved"
      + "\nadd cannot be resolved"
      + "\n++ cannot be resolved"
      + "\n== cannot be resolved"
      + "\nparameters cannot be resolved"
      + "\nsize cannot be resolved"
      + "\nentity cannot be resolved"
      + "\n=== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\ndefaultEntity cannot be resolved"
      + "\n=== cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nPARAMETER__ENTITY cannot be resolved");
  }
  
  @Check
  public void requestExecution(final /* BotInteraction */Object interaction) {
    throw new Error("Unresolved compilation problems:"
      + "\nHTTPResponse cannot be resolved to a type."
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nactions cannot be resolved"
      + "\nactions cannot be resolved"
      + "\nindexOf cannot be resolved"
      + "\n== cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nBOT_INTERACTION__ACTIONS cannot be resolved"
      + "\nactions cannot be resolved"
      + "\nget cannot be resolved"
      + "\n- cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nHTTPRequest cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nBOT_INTERACTION__ACTIONS cannot be resolved");
  }
  
  @Check
  public void entityLanguage(final /* Entity */Object entity) {
    throw new Error("Unresolved compilation problems:"
      + "\nLanguage cannot be resolved to a type."
      + "\nBot cannot be resolved to a type."
      + "\nLanguageInput cannot be resolved to a type."
      + "\nLanguage cannot be resolved to a type."
      + "\nThe method or field Language is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEMPTY cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nget cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nliteral cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nELEMENT__NAME cannot be resolved");
  }
  
  @Check
  public void entityLanguage(final /* LanguageInput */Object input) {
    throw new Error("Unresolved compilation problems:"
      + "\nBot cannot be resolved to a type."
      + "\nEntity cannot be resolved to a type."
      + "\nLanguageInput cannot be resolved to a type."
      + "\nThe method or field Language is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEMPTY cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nget cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n! cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nWITH_LANGUAGE__LANGUAGE cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nequals cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nequals cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nWITH_LANGUAGE__LANGUAGE cannot be resolved");
  }
  
  @Check
  public void intentLanguage(final /* Intent */Object intent) {
    throw new Error("Unresolved compilation problems:"
      + "\nLanguage cannot be resolved to a type."
      + "\nBot cannot be resolved to a type."
      + "\nIntentLanguageInputs cannot be resolved to a type."
      + "\nLanguage cannot be resolved to a type."
      + "\nThe method or field Language is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEMPTY cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nget cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nfallbackIntent cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nliteral cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nELEMENT__NAME cannot be resolved");
  }
  
  @Check
  public void intentLanguage(final /* IntentLanguageInputs */Object input) {
    throw new Error("Unresolved compilation problems:"
      + "\nBot cannot be resolved to a type."
      + "\nIntent cannot be resolved to a type."
      + "\nIntentLanguageInputs cannot be resolved to a type."
      + "\nThe method or field Language is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEMPTY cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nget cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n! cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nWITH_LANGUAGE__LANGUAGE cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nequals cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nequals cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nWITH_LANGUAGE__LANGUAGE cannot be resolved");
  }
  
  @Check
  public void paramLanguage(final /* PromptLanguage */Object prompt) {
    throw new Error("Unresolved compilation problems:"
      + "\nBot cannot be resolved to a type."
      + "\nParameter cannot be resolved to a type."
      + "\nPromptLanguage cannot be resolved to a type."
      + "\nThe method or field Language is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEMPTY cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nget cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n! cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nWITH_LANGUAGE__LANGUAGE cannot be resolved"
      + "\nprompts cannot be resolved"
      + "\nequals cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nequals cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nWITH_LANGUAGE__LANGUAGE cannot be resolved");
  }
  
  @Check
  public void paramLanguage(final /* Parameter */Object param) {
    throw new Error("Unresolved compilation problems:"
      + "\nLanguage cannot be resolved to a type."
      + "\nBot cannot be resolved to a type."
      + "\nPromptLanguage cannot be resolved to a type."
      + "\nLanguage cannot be resolved to a type."
      + "\nThe method or field Language is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\nprompts cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEMPTY cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nget cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nprompts cannot be resolved"
      + "\nempty cannot be resolved"
      + "\n! cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nliteral cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nELEMENT__NAME cannot be resolved");
  }
  
  @Check
  public void textLanguage(final /* TextLanguageInput */Object text) {
    throw new Error("Unresolved compilation problems:"
      + "\nBot cannot be resolved to a type."
      + "\nText cannot be resolved to a type."
      + "\nTextLanguageInput cannot be resolved to a type."
      + "\nHTTPResponse cannot be resolved to a type."
      + "\nTextLanguageInput cannot be resolved to a type."
      + "\nThe method or field Language is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEMPTY cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nget cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\ncontains cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n! cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nWITH_LANGUAGE__LANGUAGE cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nequals cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nequals cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nWITH_LANGUAGE__LANGUAGE cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nequals cannot be resolved"
      + "\n! cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nequals cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nWITH_LANGUAGE__LANGUAGE cannot be resolved");
  }
  
  @Check
  public void entityType(final /* Entity */Object entity) {
    throw new Error("Unresolved compilation problems:"
      + "\nLanguageInput cannot be resolved to a type."
      + "\nEntityInput cannot be resolved to a type."
      + "\nRegexInput cannot be resolved to a type."
      + "\nSimpleInput cannot be resolved to a type."
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\ninputs cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nENTITY__INPUTS cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nENTITY__INPUTS cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nENTITY__INPUTS cannot be resolved");
  }
  
  @Check
  public Pattern regexSyntax(final /* RegexInput */Object input) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nexpresion cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nREGEX_INPUT__EXPRESION cannot be resolved");
  }
  
  @Check
  public void textLanguage(final /* Action */Object action) {
    throw new Error("Unresolved compilation problems:"
      + "\nLanguage cannot be resolved to a type."
      + "\nBot cannot be resolved to a type."
      + "\nText cannot be resolved to a type."
      + "\nTextLanguageInput cannot be resolved to a type."
      + "\nLanguage cannot be resolved to a type."
      + "\nHTTPResponse cannot be resolved to a type."
      + "\nTextLanguageInput cannot be resolved to a type."
      + "\nLanguage cannot be resolved to a type."
      + "\nThe method or field Language is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nThe method or field Language is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\neContainer cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEMPTY cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nget cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nliteral cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nELEMENT__NAME cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\n== cannot be resolved"
      + "\nEMPTY cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nget cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguage cannot be resolved"
      + "\nlanguages cannot be resolved"
      + "\nliteral cannot be resolved"
      + "\ntoLowerCase cannot be resolved"
      + "\ntoFirstUpper cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nELEMENT__NAME cannot be resolved");
  }
  
  @Check
  public void similarPhrases(final /* TrainingPhrase */Object phrase) {
    throw new Error("Unresolved compilation problems:"
      + "\nBot cannot be resolved to a type."
      + "\nBot cannot be resolved to a type."
      + "\nThe method or field TrainingPhrase is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\neContainer cannot be resolved"
      + "\neAllContents cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\ntoList cannot be resolved"
      + "\nisSimilarTo cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nequals cannot be resolved"
      + "\n! cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nTRAINING_PHRASE__TOKENS cannot be resolved");
  }
  
  @Check
  public void atLeastTreeTrainingPhrases(final /* IntentLanguageInputs */Object intent) {
    throw new Error("Unresolved compilation problems:"
      + "\nRegexInput cannot be resolved to a type."
      + "\nThe method or field GeneratorPackage is undefined"
      + "\ninputs cannot be resolved"
      + "\nlength cannot be resolved"
      + "\n< cannot be resolved"
      + "\ninputs cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nINTENT_LANGUAGE_INPUTS__INPUTS cannot be resolved");
  }
  
  @Check
  public void trainingPhraseWithOnlyTextEntity(final /* TrainingPhrase */Object phrase) {
    throw new Error("Unresolved compilation problems:"
      + "\nLiteral cannot be resolved to a type."
      + "\nParameterReferenceToken cannot be resolved to a type."
      + "\nParameterReferenceToken cannot be resolved to a type."
      + "\nParameterReferenceToken cannot be resolved to a type."
      + "\nThe method or field DefaultEntity is undefined"
      + "\nThe method or field GeneratorPackage is undefined"
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\ntokens cannot be resolved"
      + "\nparameter cannot be resolved"
      + "\ndefaultEntity cannot be resolved"
      + "\n=== cannot be resolved"
      + "\n|| cannot be resolved"
      + "\nparameter cannot be resolved"
      + "\ndefaultEntity cannot be resolved"
      + "\n!= cannot be resolved"
      + "\nTEXT cannot be resolved"
      + "\nLiterals cannot be resolved"
      + "\nINTENT_LANGUAGE_INPUTS__INPUTS cannot be resolved");
  }
}
