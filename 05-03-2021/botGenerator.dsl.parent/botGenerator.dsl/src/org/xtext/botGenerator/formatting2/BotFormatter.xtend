/*
 * generated by Xtext 2.23.0
 */
package org.xtext.botGenerator.formatting2

import com.google.inject.Inject
import generator.Bot
import generator.Intent
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.botGenerator.services.BotGrammarAccess
import generator.GeneratorPackage
import generator.IntentLanguageInputs
import generator.Parameter
import org.eclipse.xtext.formatting2.internal.AbstractTextReplacer
import org.eclipse.xtext.formatting2.ITextReplacerContext
import generator.Entity
import generator.LanguageInput
import generator.Action
import generator.Text
import generator.TextLanguageInput
import generator.Image
import generator.HTTPRequest
import generator.HTTPResponse
import generator.UserInteraction

class BotFormatter extends AbstractFormatter2 {

	@Inject extension BotGrammarAccess

	def dispatch void format(Bot bot, extension IFormattableDocument document) {
		var intents = bot.regionFor.keyword("intents").prepend[setNewLines(2, 2, 2)]
		var entities = bot.regionFor.keyword("entities").prepend[setNewLines(2, 2, 2)]
		var actions = bot.regionFor.keyword("actions").prepend[setNewLines(2, 2, 2)]
		var flowKeyWord = bot.regionFor.keyword("flows").prepend[setNewLines(2, 2, 2)]

		var flows = bot.regionFor.keywords("-");
		flows.forEach[f|f.prepend[newLine]]

		var dotComa = bot.allRegionsFor.keywords(";")

		interior(intents, entities)[indent]
		interior(entities, actions)[indent]
		interior(actions, flowKeyWord)[indent]
		interior(flowKeyWord, dotComa.last)[indent]
		dotComa.last.append[setNewLines(2,2,5)]
		for (intent : bot.intents) {
			intent.format
		}
		for (entity : bot.entities) {
			entity.format
		}
		for (action : bot.actions) {
			action.format
		}
		for (userInteraction : bot.flows) {
			userInteraction.format
		}
	}

	def dispatch void format(UserInteraction flow, extension IFormattableDocument document) {
		if (flow.target !== null) {
			var open = flow.target.regionFor.keyword("{")
			var close = flow.target.regionFor.keyword("}")
			open.append[newLine]
			close.prepend[newLine]
			interior(open, close)[indent]
			if (flow.target.outcoming.size > 1) {

				flow.target.regionFor.keywords("=>").forEach[p|p.prepend[newLine]]
				for (subFlow : flow.target.outcoming) {
					subFlow.format
				}
			}
		}
	}

	def dispatch void format(Action action, extension IFormattableDocument document) {
		action.prepend[newLine]
		action.interior[indent]
		if (action instanceof Text) {
			for (textLanInput : (action as Text).inputs) {
				textLanInput.format
			}
		} else if (action instanceof Image) {
			(action as Image).regionFor.keyword("URL").prepend[newLine]
			(action as Image).regionFor.keyword("caption").prepend[newLine]
		} else if (action instanceof HTTPRequest) {
			(action as HTTPRequest).regionFor.keyword("URL").prepend[newLine]
			(action as HTTPRequest).regionFor.keyword("basicAuth").prepend[newLine]
			(action as HTTPRequest).regionFor.keyword("headers").prepend[newLine]
			//Indent headers
			if ((action as HTTPRequest).headers.size > 1) {
				for (keyValue : (action as HTTPRequest).headers) {
					keyValue.regionFor.feature(GeneratorPackage.Literals.KEY_VALUE__KEY).prepend[newLine]
				}
				if ((action as HTTPRequest).data.isEmpty) {
					interior((action as HTTPRequest).regionFor.keyword("headers"),
						(action as HTTPRequest).regionFor.keywords(";").last)[indent]
				} else {
					interior((action as HTTPRequest).regionFor.keyword("headers"),
						(action as HTTPRequest).regionFor.keyword("data"))[indent]
				}
				
			}
			(action as HTTPRequest).regionFor.keyword("data").prepend[newLine]
			//Indent data
			if ((action as HTTPRequest).data.size > 1) {
				for (keyValue : (action as HTTPRequest).data) {
					keyValue.regionFor.feature(GeneratorPackage.Literals.KEY_VALUE__KEY).prepend[newLine]
				}
				
				if (!(action as HTTPRequest).regionFor.keywords("dataType").isEmpty) {
					interior((action as HTTPRequest).regionFor.keyword("data"),
						(action as HTTPRequest).regionFor.keyword("dataType"))[indent]
				} else {
					interior((action as HTTPRequest).regionFor.keyword("data"),
						(action as HTTPRequest).regionFor.keywords(";").last)[indent]
				}
			}
			(action as HTTPRequest).regionFor.keyword("dataType").prepend[newLine]
		} else if (action instanceof HTTPResponse) {
			(action as HTTPResponse).regionFor.keyword("Request").prepend[newLine]
			for (textLanInput : (action as HTTPResponse).inputs) {
				textLanInput.format
			}
		}
	}

	def dispatch void format(TextLanguageInput textLanInput, extension IFormattableDocument document) {
		textLanInput.prepend[newLine]
		var open = textLanInput.regionFor.keyword("{")
		var close = textLanInput.regionFor.keyword("}")
		open.append[newLine]
		close.prepend[newLine]
		interior(open, close)[indent]
		for (textInput : textLanInput.inputs) {
			textInput.prepend[newLine]
		}
	}

	def dispatch void format(Intent intent, extension IFormattableDocument document) {
		intent.prepend[setNewLines(2, 2, 2)]
		intent.interior[indent]
		intent.regionFor.feature(GeneratorPackage.Literals.ELEMENT__NAME).prepend[newLine]
		for (intentLanguageInputs : intent.inputs) {
			intentLanguageInputs.format
		}
		intent.regionFor.keyword("parameters").prepend[newLine]
		interior(intent.regionFor.keyword("parameters"), intent.parameters.last.regionFor.keyword(";"))[indent]
		for (parameter : intent.parameters) {
			parameter.format
		}
	}

	def dispatch void format(Entity entity, extension IFormattableDocument document) {
		entity.prepend[newLine]
		entity.regionFor.keyword(":").append[newLine]
		entity.interior[indent]
		for (lanInput : entity.inputs) {
			lanInput.format
		}
	}

	def dispatch void format(LanguageInput lanInput, extension IFormattableDocument document) {
		lanInput.prepend[newLine]
		var open = lanInput.regionFor.keyword("{")
		var close = lanInput.regionFor.keyword("}")
		open.append[newLine]
		close.prepend[newLine]
		interior(open, close)[indent]
		for (entry : lanInput.inputs) {
			entry.prepend[newLine]
		}
	}

	def dispatch void format(Parameter parameter, extension IFormattableDocument document) {
		parameter.prepend[newLine]
	}

	def dispatch void format(IntentLanguageInputs intentInput, extension IFormattableDocument document) {
		intentInput.regionFor.keyword("inputs").prepend[newLine]
		var open = intentInput.regionFor.keyword("{")
		var close = intentInput.regionFor.keyword("}")
		open.append[newLine]
		close.prepend[newLine]
		interior(open, close)[indent]
		for (input : intentInput.inputs) {
			input.prepend[newLine]
		}
	}

// TODO: implement for IntentLanguageInputs, UserInteraction, BotInteraction, TrainingPhrase, Parameter, Entity, LanguageInput, CompositeInput, Text, TextLanguageInput, HTTPResponse, HTTPRequest, TextInput, KeyValue
}
