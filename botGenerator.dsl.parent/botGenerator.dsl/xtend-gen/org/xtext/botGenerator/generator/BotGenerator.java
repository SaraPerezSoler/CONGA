/**
 * generated by Xtext 2.19.0
 */
package org.xtext.botGenerator.generator;

import generator.Entity;
import generator.EntityInput;
import generator.Intent;
import generator.IntentInput;
import generator.IntentLanguageInputs;
import generator.LanguageInput;
import generator.RegexInput;
import generator.SimpleInput;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import zipUtils.Zip;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BotGenerator extends AbstractGenerator {
  public static final int REGEX = 0;
  
  public static final int SIMPLE = 1;
  
  public static final int COMPOSITE = 2;
  
  public static final int TRAINING = 3;
  
  private static boolean isPlugin = true;
  
  private static String newpath;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String resourceName = resource.getURI().lastSegment().substring(0, resource.getURI().lastSegment().indexOf("."));
    String uri = "";
    if (BotGenerator.isPlugin) {
      String workspacePath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString();
      String srcPath = fsa.getURI("").toPlatformString(false);
      uri = ((((workspacePath + "/") + srcPath) + "/") + resourceName);
    } else {
      if ((BotGenerator.newpath == null)) {
        String _replace = resource.getURI().devicePath().replace(resource.getURI().lastSegment(), "");
        String _plus = (_replace + "/gen");
        uri = _plus;
      } else {
        uri = ((BotGenerator.newpath + "/") + resourceName);
      }
    }
    String dialogflowGeneratorUri = (uri + "/Dialogflow");
    Zip dialogflowZip = new Zip(dialogflowGeneratorUri, resourceName);
    DialogflowGenerator dialogflow = new DialogflowGenerator();
    dialogflow.doGenerate(resource, fsa, context, dialogflowZip);
    String rasaUri = (uri + "/Rasa");
    Zip rasaZip = new Zip(rasaUri, resourceName);
    RasaGenerator rasa = new RasaGenerator();
    rasa.doGenerate(resource, fsa, context, rasaZip);
  }
  
  public static int entityType(final Entity entity) {
    if ((entity != null)) {
      LanguageInput input = entity.getInputs().get(0);
      EntityInput _get = input.getInputs().get(0);
      if ((_get instanceof RegexInput)) {
        return BotGenerator.REGEX;
      } else {
        EntityInput _get_1 = input.getInputs().get(0);
        if ((_get_1 instanceof SimpleInput)) {
          return BotGenerator.SIMPLE;
        } else {
          return BotGenerator.COMPOSITE;
        }
      }
    }
    return 0;
  }
  
  public static boolean setIsPlugin(final boolean value) {
    return BotGenerator.isPlugin = value;
  }
  
  public static String newPath(final String path) {
    String _xblockexpression = null;
    {
      BotGenerator.isPlugin = false;
      _xblockexpression = BotGenerator.newpath = path;
    }
    return _xblockexpression;
  }
  
  public static int intentType(final Intent intent) {
    IntentLanguageInputs input = intent.getInputs().get(0);
    IntentInput _get = input.getInputs().get(0);
    if ((_get instanceof RegexInput)) {
      return BotGenerator.REGEX;
    } else {
      return BotGenerator.TRAINING;
    }
  }
}
