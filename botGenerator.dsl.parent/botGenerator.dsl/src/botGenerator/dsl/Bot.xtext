// automatically generated by Xtext
grammar org.xtext.botGenerator.Bot with org.eclipse.xtext.common.Terminals

import "platform:/resource/botGenerator/Model/BotGenerator.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Bot returns Bot:
	'Chatbot' name=EString 'language'':' languages+=Language (','languages+=Language)*
	
		'intents'':' intents+=Intent ( intents+=Intent)*  
		('entities'':'  entities+=Entity (entities+=Entity)*  )?
		('actions'':'  actions+=Action (actions+=Action)*  )?
		'flows'':' ('-'flows+=Transition';')+ ;


Action returns Action:
	Text | HTTPRequest | Image | HTTPResponse | Empty | ButtonAction;

Token returns Token:
	Literal | EntityToken | ParameterToken | ParameterRefenceToken;


EString returns ecore::EString:
	STRING | ID;

Intent returns Intent:
	Intent1 | Intent2
;

Intent2 returns Intent:
	name=EString (fallbackIntent?='Fallback')? ':'
		(inputs+=LanguageIntent)*
		('parameters'':'  ((parameters+=Parameter2)* parameters+=Parameter )+)?
	;
Intent1 returns Intent:
	name=EString (fallbackIntent?='Fallback')?
	;
	
LanguageIntent returns LanguageIntent: 
	('inputs'('in' language=Language)?)? '{'  inputs+=TrainingPhrase ( "," inputs+=TrainingPhrase)*'}'
;

Transition returns UserInteraction:
	(name=EString':')?'user' intent=[Intent|EString] ('=>'(target=(State2|State) |  backTo=BackToBot))?
;

BackToBot returns BackToBot:
	('chatbot' (previous+=[Action| EString])+)? 'back' 'to' backTo=[BotInteraction|EString]
;

State2 returns BotInteraction:
	(name=EString':')? 'chatbot' actions+=[Action|EString](','actions+=[Action|EString])*('{'
	  ('=>' ((outcoming+=Transition)| ('back' 'to' backTo+=[UserInteraction|EString]))';')+
	 '}')?
;

State returns BotInteraction:
	(name=EString':')? 'chatbot' actions+=[Action|EString](','actions+=[Action|EString])*('=>'(outcoming+=Transition | ('back' 'to' backTo+=[UserInteraction|EString]))) 
;

TrainingPhrase returns TrainingPhrase:
	{TrainingPhrase}
	tokens+=(Literal | ParameterRefenceToken)+;

Parameter returns Parameter:
	 name=EString':' 
		'entity' (entity=[Entity|EString] | defaultEntity=DefaultEntity) 
		(','isList?='isList')?
		(',' required?='required')?
		(','  (prompts+=LanguagePrompt)+)?
		 ';';

Parameter2 returns Parameter:
	 name=EString ',';
		
LanguagePrompt returns LanguagePrompt:
	'prompts'('in' language=Language)?'['prompts+=EString (','prompts+=EString)*']' 
;


Literal returns Literal:
	 text=EString;

EntityToken returns EntityToken:
	'@'entity=[Entity|EString];

ParameterToken returns ParameterToken:
	'['parameter=[Parameter|EString]']' ('('info=EString')')?;

ParameterRefenceToken returns ParameterReferenceToken:
	'('textReference=EString')''[' parameter=[Parameter|EString]']';
	
HTTPRequestToken returns HTTPRequestToke:
	'request.'type=HTTPReturnType('.'dataKey=EString)?
;
enum DefaultEntity returns DefaultEntity:
	TEXT = 'text' | NUMBER = 'number' | DATE = 'date' | FLOAT = 'float' | TIME = "time";

EBoolean returns ecore::EBoolean:
	'true' | 'false';
Entity returns Entity:
	SimpleEntity | ComplexEntity | RegexEntity
	;

SimpleEntity returns Entity:
	'Simple''entity' name=EString ':'
		(inputs+= SLanguageEntity)+	
	;
ComplexEntity returns Entity:
	'Composite''entity' name=EString ':'
		(inputs+= CLanguageEntity)+	
	;
RegexEntity returns Entity:
	'Regex''entity' name=EString ':'
		(inputs+= RLanguageEntity)+	
	;

SLanguageEntity returns LanguageEntity: 
	('inputs' 'in' language=Language)? '{'
		(inputs+=SimpleInput (inputs+= SimpleInput)* )
	'}'
;
CLanguageEntity returns LanguageEntity: 
	('inputs' 'in' language=Language)? '{'
		(inputs+=CompositeInput (inputs+= CompositeInput)* )
	'}'
;
RLanguageEntity returns LanguageEntity: 
	('inputs' 'in' language=Language)? '{'
		(inputs+=RegexInput (inputs+= RegexInput)* )
	'}'
;

RegexInput returns RegexInput:
	{RegexInput}
	'pattern'':' expresion=EString
;

CompositeInput returns CompositeInput:
	{CompositeInput}
	'composite'':' expresion+=(Literal|EntityToken)+
;

SimpleInput returns SimpleInput:
	{SimpleInput}
	name=EString ('synonyms'  values+=EString ( "," values+=EString)* )? ;

Text returns Text:
	('Text'|'text') 'response' name=EString':'
	(inputs+=LanguageText)+
		 ;
LanguageText returns LanguageText:
	('inputs'('in' language=Language)?)?'{'inputs+=TextInputText (',' inputs+=TextInputText)* '}'
;

HTTPResponse returns HTTPResponse:
	'Response' name=EString ':'
		'Request'':' HTTPRequest=[HTTPRequest|EString]';'
		(inputs+=LanguageTextHttpResponse)+;
		
HTTPRequest returns HTTPRequest:
	'Request' method=Method name=EString ':'
		'URL'':' URL=EString ';'
		('basicAuth'':' basicAuth=KeyValue';')?
		('headers'':'  headers+=KeyValue ( "," headers+=KeyValue)* ';')?
		('data'':'  data+=Data ( "," data+=Data)*';'  
		 'dataType'':'  dataType=DataType';')?;
Image returns Image:
	('Image'|'mage') 'response' name=EString':'
		'URL'':' URL=EString
		('caption'':' caption=EString)?
;

Empty returns Empty:
	'Empty' 'response' name=EString ('{''description:' description=EString'}')?
;

ButtonAction returns ButtonAction:
	'Button' 'response' name=EString':'
	inputs+=LanguageButton
;

LanguageButton returns LanguageButton:
	('inputs'('in' language=Language)?)?'{'
		('text:' '-' inputs+=TextInputText (',' '-' inputs+=TextInputText)*)?
		'buttons:'
		(buttons+=Button)+	
	'}'
;
Button returns Button: 
	'-' 'value:' value=EString
	('action:' action=EString)?
;


LanguageTextHttpResponse returns LanguageText:
	'inputs'('in' language=Language)?'{'inputs+=TextInputHttpResponse (',' inputs+=TextInputHttpResponse)* '}';
	
	
TextInputHttpResponse returns TextInput:
	(tokens+=(Literal|ParameterToken|HTTPRequestToken))+;
	
TextInputText returns TextInput:
	(tokens+=(Literal|ParameterToken))+ ;
	


enum HTTPReturnType returns HTTPReturnType:
	TEXT='text'|STATUS_CODE='status_code'| IMAGE='image'|DATA='data'
;

enum Language returns Language:
	ENGLISH = 'en' | SPANISH = 'es' | DANISH = 'da' | GERMAN = 'de' | FRENCH = 'fr' |
	HINDI = 'hi'| INDONESIAN = 'id' | ITALIAN = 'it' | JAPANESE ='ja' | KOREAN = 'ko'|
	DUTCH ='nl' | NORWEGIAN = 'no' | POLISH = 'pl' | PORTUGUESE = 'pt'| RUSIAN = 'ru'|
	SWEDISH = 'sv'| THAI = 'th' | TURKISH = 'tr' | UKRANIAN = 'uk' | CHINESE = 'zh' | 
	ARABIC = 'ar' | CZECH = 'cz'| BULGARIAN = 'bu' | FINISH = 'fi' | GREEK = 'gr' | BANGLA = 'ba'
	
;
KeyValue returns KeyValue:
	key=EString ':' value=Literal;
    
Data returns KeyValue:
    key=EString ':' value=(Literal|ParameterToken);

enum DataType returns DataType:
	JSON = 'JSON' | FORM = 'FORM';

enum Method returns Method:
	POST = 'post' | GET = 'get';
