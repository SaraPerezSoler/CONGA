/*
 * generated by Xtext 2.20.0
 */
/*package org.xtext.botGenerator.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import generator.Bot;
import generator.GeneratorPackage;

import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.botGenerator.BotStandaloneSetup;

public class BotPlatformStandAlone {
	
	private static BotPlatformStandAlone botPlatform;
	public static void main(String[] args) {
		if (args.length < 2) {
			System.err.println("Aborting: no path to EMF resource provided or destination folder!");
			return;
		}
		Injector injector = new BotStandaloneSetup().createInjectorAndDoEMFRegistration();
		BotPlatformStandAlone main = injector.getInstance(BotPlatformStandAlone.class);
		main.runGenerator(args[0], args[1]);
	}
	public static BotPlatformStandAlone getBotPlatformStandAlone() {
		if (botPlatform == null) {
			Injector injector = new BotStandaloneSetup().createInjectorAndDoEMFRegistration();
			botPlatform = injector.getInstance(BotPlatformStandAlone.class);
		}
		return botPlatform;
	}
	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	public List<Issue> validate (Resource resource){
		return validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
	}
	public Resource getResource (String string) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		return set.getResource(URI.createFileURI(string), true);
	}
	public Bot getResourceBot (String string) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		return (Bot) set.getResource(URI.createFileURI(string), true).getContents().get(0);
	}
	public void runGenerator(String string, String dst) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		set.getPackageRegistry().put(GeneratorPackage.eNS_URI, GeneratorPackage.eINSTANCE);
		Resource resource = set.getResource(URI.createFileURI(string), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}
		BotGenerator.setIsPlugin(false);
		BotGenerator.newPath(dst);
		// Configure and start the generator
		fileAccess.setOutputPath(dst);
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.generate(resource, fileAccess, context);

		System.out.println("Code generation finished.");
	}
}*/
