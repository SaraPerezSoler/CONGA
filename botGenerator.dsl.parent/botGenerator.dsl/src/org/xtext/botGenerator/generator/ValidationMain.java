/*
 * generated by Xtext 2.20.0
 */
package org.xtext.botGenerator.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import generator.Bot;
import generator.GeneratorPackage;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.mwe.core.issues.IssuesImpl;
import org.eclipse.xtext.diagnostics.Severity;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.botGenerator.BotStandaloneSetup;

public class ValidationMain {

	private static ValidationMain botPlatform;

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private XtextResourceSet resourceSetXtext;

	public static void main(String[] args) {
		if (args.length < 1) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new BotStandaloneSetup().createInjectorAndDoEMFRegistration();
		ValidationMain main = injector.getInstance(ValidationMain.class);
		Resource resource;
		File file = new File(args[0]);
		if (!file.exists()) {
			System.err.println("The file does not exists");
			return;
		}
		if (args[0].endsWith(".xmi")) {
			Resource aux = main.getResource(args[0]);
			Bot bot = main.getBot(aux);
			resource = main.createBotResource(bot, args[0].replace(".xmi", ".bot"));
		} else {
			resource = main.getResource(args[0]);
		}

		main.validate(resource);
	}

	private Resource createBotResource(Bot bot, String outputUri) {
		resourceSetXtext.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE);

		if (!EPackage.Registry.INSTANCE.containsKey(GeneratorPackage.eNS_URI)) {
			EPackage.Registry.INSTANCE.put(GeneratorPackage.eNS_URI, GeneratorPackage.eINSTANCE);
		}
		Resource resourceDsl = resourceSetXtext.createResource(URI.createFileURI(outputUri));

		resourceDsl.getContents().add(bot);
		try {
			Map<Object, Object> options = new HashMap<Object, Object>();
			options.put(XtextResource.OPTION_ENCODING, "UTF-8");
			resourceDsl.save(options);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return resourceDsl;
	}

	public static ValidationMain getBotPlatformStandAlone() {
		if (botPlatform == null) {
			Injector injector = new BotStandaloneSetup().createInjectorAndDoEMFRegistration();
			botPlatform = injector.getInstance(ValidationMain.class);
		}
		return botPlatform;
	}

	public Resource getResource(String string) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("*", new XMIResourceFactoryImpl());
		// Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(".bot",
		// Xtext)
		set.getPackageRegistry().put(GeneratorPackage.eNS_URI, GeneratorPackage.eINSTANCE);
		return set.getResource(URI.createFileURI(string), true);
	}

	public Bot getBot(Resource resource) {
		return (Bot) resource.getContents().get(0);
	}

	public void validate(Resource resource) {

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		List<MyIssue> errors = new ArrayList<MyIssue>();
		List<MyIssue> warnings = new ArrayList<MyIssue>();
		String regex = "G[0-9].*";
		Pattern pattern = Pattern.compile(regex);

		if (!list.isEmpty()) {
			List<MyIssue> iList = groupG17(list);
			iList = groupG18(iList);
			iList = groupG16(iList);
			for (MyIssue issue : iList) {
				Matcher matcher = pattern.matcher(issue.getMessage());
				if (matcher.matches()) {
					if (issue.getSeverity() == Severity.WARNING) {
						warnings.add(issue);
					} else if (issue.getSeverity() == Severity.ERROR) {
						errors.add(issue);
					}
				}
			}
			System.err.println("Total " + (errors.size()+warnings.size()) + " problems, " + errors.size() + " errors and " + warnings.size()
					+ " warnings");
			Collections.sort(warnings, new Comparator<MyIssue>() {
				public int compare(MyIssue i1, MyIssue i2) {
					String code1 = i1.getMessage().split("\t")[0];
					String code2 = i2.getMessage().split("\t")[0];
					
					int num1 = Integer.parseInt(code1.substring(1));
					int num2 = Integer.parseInt(code2.substring(1));
					if ( num1 < num2) {
						return -1;
					}else if (num1 > num2) {
						return 1;
					} else {
						return 0;
					}
				}
			});
			
			Collections.sort(errors, new Comparator<MyIssue>() {
				public int compare(MyIssue i1, MyIssue i2) {
					String code1 = i1.getMessage().split("\t")[0];
					String code2 = i2.getMessage().split("\t")[0];
					
					int num1 = Integer.parseInt(code1.substring(1));
					int num2 = Integer.parseInt(code2.substring(1));
					if ( num1 < num2) {
						return -1;
					}else if (num1 > num2) {
						return 1;
					} else {
						return 0;
					}
				}
			});
			for (MyIssue error : errors) {
				System.err.println(error.getSeverity() + ": " + error.getMessage());
				// System.err.println(issue.getSeverity()+":
				// "+issue.getMessage().substring(issue.getMessage().indexOf("\t")+1));
			}
			for (MyIssue warning : warnings) {
				System.err.println(warning.getSeverity() + ": " + warning.getMessage());
				// System.err.println(issue.getSeverity()+":
				// "+issue.getMessage().substring(issue.getMessage().indexOf("\t")+1));
			}

			return;
		} else {
			System.out.println("Validation successful");
		}
	}
	
	public static List<MyIssue> groupG17(List<Issue> list){
		String msg;
		
		Map<String, RepIssue> name_issue = new HashMap<String, RepIssue>();
		List<MyIssue> ret = new ArrayList<MyIssue>();
		for (Issue i: list) {
			msg= i.getMessage();
			if (msg.startsWith("G17")) {
				String name = msg.replaceAll("G17\\tThe intent ", "");
				name = name.split(" ")[0];
				if (name_issue.containsKey(name)) {
					RepIssue repIssue = name_issue.get(name);
					repIssue.addOne();
					name_issue.put(name, repIssue);
				}else {
					RepIssue repIssue = new RepIssue(1, i);
					name_issue.put(name, repIssue);
				}
			}else {
				ret.add(new MyIssue(i));
			}
		}
		
		for (String key: name_issue.keySet()) {
			RepIssue repIssue = name_issue.get(key);
			int rep = repIssue.getRep();
			repIssue.setMessege("G17\tThe intent " + key + " contains "+rep+" training phrases repeated. Two training phrases cannot be equal in the same intent");
			ret.add(repIssue);
		}
		return ret;
	}
	
	public static List<MyIssue> groupG18(List<MyIssue> list){
		String msg;
		
		Map<String, RepIssue> name_issue = new HashMap<String, RepIssue>();
		List<MyIssue> ret = new ArrayList<MyIssue>();
		for (MyIssue i: list) {
			msg= i.getMessage();
			if (msg.startsWith("G18")) {
				String name = msg.replaceAll("G18\tThe intent ", "");
				name = name.split(" ")[0];
				if (name_issue.containsKey(name)) {
					RepIssue repIssue = name_issue.get(name);
					repIssue.addOne();
					name_issue.put(name, repIssue);
				}else {
					RepIssue repIssue = new RepIssue(1, i.getIssue());
					name_issue.put(name, repIssue);
				}
			}else {
				ret.add(i);
			}
		}
		
		for (String key: name_issue.keySet()) {
			RepIssue repIssue = name_issue.get(key);
			int rep = repIssue.getRep();
			repIssue.setMessege("G18\tThe intent " + key + " contains "+rep+" training phrase with only a text parameter. Training phrases should contain something more than a text parameter");
			ret.add(repIssue);
		}
		return ret;
	}
	
	public static List<MyIssue> groupG16(List<MyIssue> list){
		String msg;
		
		Map<String, RepIssue> name_issue = new HashMap<String, RepIssue>();
		List<MyIssue> ret = new ArrayList<MyIssue>();
		for (MyIssue i: list) {
			msg= i.getMessage();
			if (msg.startsWith("G16")) {
				String sentences = msg.replaceAll("G16\tThe intents ", "");
				String name1 = sentences.split(" ")[0];
				String name2 = sentences.replaceAll(name1+" and ", "").split(" ")[0];
				
				if (name_issue.containsKey(name1+"@"+name2)) {
					RepIssue repIssue = name_issue.get(name1+"@"+name2);
					repIssue.addOne();
					name_issue.put(name1+"@"+name2, repIssue);
				}else if (name_issue.containsKey(name2+"@"+name1)) {
					RepIssue repIssue = name_issue.get(name2+"@"+name1);
					repIssue.addOne();
					name_issue.put(name2+"@"+name1, repIssue);
					
				}else {
					RepIssue repIssue = new RepIssue(1, i.getIssue());
					name_issue.put(name1+"@"+name2, repIssue);
				}
			}else {
				ret.add(i);
			}
		}
		
		for (String key: name_issue.keySet()) {
			RepIssue repIssue = name_issue.get(key);
			repIssue.setMessege(repIssue.getIssue().getMessage());
			ret.add(repIssue);
		}
		return ret;
	}


}
