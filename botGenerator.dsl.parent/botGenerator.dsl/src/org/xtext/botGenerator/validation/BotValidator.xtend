/*
0 * generated by Xtext 2.19.0
 */
package org.xtext.botGenerator.validation

import generator.Bot
import generator.GeneratorPackage
import generator.HTTPRequestToke
import generator.HTTPReturnType
import generator.Intent
import generator.ParameterReferenceToken
import generator.TrainingPhrase
import org.eclipse.xtext.validation.Check
import generator.Element
import java.util.ArrayList
import generator.Parameter
import generator.SimpleInput
import generator.HTTPResponse
import generator.BotInteraction
import generator.Language
import generator.IntentLanguageInputs
import generator.PromptLanguage
import generator.TextLanguageInput
import generator.Text
import generator.LanguageInput
import generator.EntityInput
import generator.Entity
import generator.RegexInput
import generator.GeneratorFactory
import java.util.regex.Pattern
import java.util.regex.PatternSyntaxException
import generator.Literal
import generator.DefaultEntity
import generator.WithLanguage
import generator.IntentInput
import generator.UserInteraction
import generator.Token

/**
 * 
 * @author Sara Pérez Soler
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class BotValidator extends AbstractBotValidator {

	/**
	 * Rule G1: Name of intents, actions, entities (elements), entries and parameters (elements) should be unique
	 */
	@Check
	def nameUnique(Element e) {
		var container = e.eContainer;
		if (container instanceof Bot) {
			var elements = new ArrayList<Element>();
			elements.addAll(container.intents);
			elements.addAll(container.actions)
			elements.addAll(container.entities)

			for (Element i : elements) {
				if ((!i.equals(e)) && i.name.equals(e.name)) {
					error("G1\tThere are several elements with the name " + i.name +
						". The name of the elements must be unique", GeneratorPackage.Literals.ELEMENT__NAME)
				}
			}
		}
	}

	/**
	 * Rule G1: Name of intents, actions, entities (elements), entries and parameters (elements) should be unique
	 */
	@Check
	def nameUnique(Parameter param) {
		var container = param.eContainer;
		if (container instanceof Intent) {
			for (Parameter p : container.parameters) {
				if ((!param.equals(p)) && param.name.equals(p.name)) {
					error("G1\tThere are several parameters with the name " + p.name +
						" in this intent. The name of the parameters must be unique",
						GeneratorPackage.Literals.ELEMENT__NAME)
				}
			}
		}
	}

	/**
	 * Rule G1: Name of intents, actions, entities (elements), entries and parameters (elements) should be unique
	 */
	@Check
	def nameUnique(SimpleInput input) {
		var container = input.eContainer;
		if (container instanceof LanguageInput) {
			for (EntityInput i : container.inputs) {
				if (i instanceof SimpleInput) {
					if ((!input.equals(i)) && input.name.equals(i.name)) {
						error("G1\tThere are several entries with the name " + i.name +
							" in this entity. The name of the entries must be unique",
							GeneratorPackage.Literals.ELEMENT__NAME)
					}
				}
			}
		}
	}

	/**
	 * Rule G2: The language of the elements (intent, actions, entity...) must be among the chatbot language
	 */
	@Check
	def existingLanguage(WithLanguage language) {
		var aux = language.eContainer;
		while (!(aux instanceof Bot)) {
			aux = aux.eContainer;
		}
		var bot = aux as Bot;
		if (language.language == Language.EMPTY) {
			language.language = bot.languages.get(0);
		}
		if (!bot.languages.contains(language.language)) {
			getErrorG2(language)
		}
	}

	def getErrorG2(WithLanguage language) {
		if (language instanceof LanguageInput) {
			var entity = language.eContainer as Entity
			error(
				"G2\tThe entity " + entity.name + " contains inputs for the language " +
					language.language.literal.toLowerCase().toFirstUpper +
					" which is not defined in the chatbot languages", GeneratorPackage.Literals.WITH_LANGUAGE__LANGUAGE)
		} else if (language instanceof IntentLanguageInputs) {
			var intent = language.eContainer as Intent
			error(
				"G2\tThe intent " + intent.name + " contains inputs for the language " +
					language.language.literal.toLowerCase().toFirstUpper +
					" which is not defined in the chatbot languages", GeneratorPackage.Literals.WITH_LANGUAGE__LANGUAGE)
		} else if (language instanceof PromptLanguage) {
			var parameter = language.eContainer as Parameter
			var intent = parameter.eContainer as Intent
			error(
				"G2\tThe parameter " + parameter.name + " of the intent " + intent.name +
					"  contains inputs for the language " + language.language.literal.toLowerCase().toFirstUpper +
					" which is not defined in the chatbot languages", GeneratorPackage.Literals.WITH_LANGUAGE__LANGUAGE)
		} else if (language instanceof TextLanguageInput) {
			var text = language.eContainer as Text
			error(
				"G2\tThe text response " + text.name + "  contains inputs for the language " +
					language.language.literal.toLowerCase().toFirstUpper +
					" which is not defined in the chatbot languages", GeneratorPackage.Literals.WITH_LANGUAGE__LANGUAGE)
		}
	}

	/**
	 * Rule G3: There can not be two LanguageInput with the same language in the same element
	 */
	@Check
	def uniqueElementLanguage(WithLanguage language) {
		var othersLanguage = new ArrayList<WithLanguage>();
		if (language instanceof LanguageInput) {
			var entity = language.eContainer as Entity
			othersLanguage.addAll(entity.inputs)
		} else if (language instanceof IntentLanguageInputs) {
			var intent = language.eContainer as Intent
			othersLanguage.addAll(intent.inputs);
		} else if (language instanceof TextLanguageInput) {
			if (language.eContainer instanceof Text) {
				var text = language.eContainer as Text
				othersLanguage.addAll(text.inputs)
			} else if (language.eContainer instanceof HTTPResponse) {
				var text = language.eContainer as HTTPResponse
				othersLanguage.addAll(text.inputs)
			}
		} else if (language instanceof PromptLanguage) {
			var parameter = language.eContainer as Parameter
			othersLanguage.addAll(parameter.prompts)
		}

		var aux = language.eContainer;
		while (!(aux instanceof Bot)) {
			aux = aux.eContainer;
		}
		var bot = aux as Bot;
		if (language.language == Language.EMPTY) {
			language.language = bot.languages.get(0);
		}

		for (language2 : othersLanguage) {
			if (language2.language === Language.EMPTY) {
				language2.language = bot.languages.get(0);
			}
			if (!language.equals(language2) && language.language.equals(language2.language)) {
				getErrorG3(language)
			}
		}
	}

	def getErrorG3(WithLanguage language) {
		if (language instanceof LanguageInput) {
			var entity = language.eContainer as Entity
			error(
				"G3\tThe are several inputs with the language " + language.language.literal.toLowerCase().toFirstUpper +
					" in the entity " + entity.name, GeneratorPackage.Literals.WITH_LANGUAGE__LANGUAGE)
		} else if (language instanceof IntentLanguageInputs) {
			var intent = language.eContainer as Intent
			error(
				"G3\tThe are several inputs with the language " + language.language.literal.toLowerCase().toFirstUpper +
					" in the intent " + intent.name, GeneratorPackage.Literals.WITH_LANGUAGE__LANGUAGE)
		} else if (language instanceof PromptLanguage) {
			var parameter = language.eContainer as Parameter
			var intent = parameter.eContainer as Intent
			error(
				"G3\tThe are several inputs with the language " + language.language.literal.toLowerCase().toFirstUpper +
					" in the parameter " + parameter.name + " of the intent " + intent.name,
				GeneratorPackage.Literals.WITH_LANGUAGE__LANGUAGE)
		} else if (language instanceof TextLanguageInput) {
			var text = language.eContainer as Text
			error(
				"G3\tThe are several inputs with the language " + language.language.literal.toLowerCase().toFirstUpper +
					" in the text response " + text.name, GeneratorPackage.Literals.WITH_LANGUAGE__LANGUAGE)
		}
	}

	/**
	 * Rule G4: Different flow paths cannot start with the same intent
	 */
	@Check
	def flowPath(Bot bot) {
		for (var i = 0; i < bot.flows.size; i++) {
			var current = bot.flows.get(i);
			for (var j = i + 1; j < bot.flows.size; j++) {
				var nexts = bot.flows.get(j)
				if (current.intent === nexts.intent) {
					error("G4\tOnly one path can start with the intent " + current.intent.name,
						GeneratorPackage.Literals.BOT__FLOWS)
				}
			}
		}
	}

	/**
	 * Rule G4: Different flow paths cannot start with the same intent
	 */
	@Check
	def flowPathState(BotInteraction state) {
		for (var i = 0; i < state.outcoming.size; i++) {
			var current = state.outcoming.get(i);
			for (var j = i + 1; j < state.outcoming.size; j++) {
				var nexts = state.outcoming.get(j)
				if (current.intent === nexts.intent) {
					error("G4\tOnly one path can start with the intent " + current.intent.name,
						GeneratorPackage.Literals.BOT_INTERACTION__OUTCOMING)
				}
			}
		}
	}

	/**
	 * Rule G5: There should be a referencing HTTPRequest before the HTTPResponse
	 */
	@Check
	def requestExecution(BotInteraction interaction) {
		for (action : interaction.actions) {
			if (action instanceof HTTPResponse) {
				var index = interaction.actions.indexOf(action)
				if (index == 0) {
					error("G5\tBefore an HttpResponse must go the HttpRequest which reference",
						GeneratorPackage.Literals.BOT_INTERACTION__ACTIONS)
				} else if (interaction.actions.get(index - 1) !== action.HTTPRequest) {
					error("G5\tBefore an HttpResponse must go the HttpRequest which reference",
						GeneratorPackage.Literals.BOT_INTERACTION__ACTIONS)
				}
			}
		}
	}

	/**
	 * Rule G6: Reference "back to" must point to an element on the same path, at a previous position
	 */
//	@Check
//	def loopsPath(UserInteraction interaction) {
//		if (interaction.backTo !== null) {
//			if (pathContainsBotInteraction(interaction, interaction.backTo.backTo) === false) {
//				error("G6\tBack to bot interaction must be in the same path, previously",
//					GeneratorPackage.Literals.USER_INTERACTION__BACK_TO)
//			}
//		}
//	}
//	def boolean pathContainsBotInteraction(UserInteraction user, BotInteraction bot) {
//		if (user.src !== null) {
//			if (user.src === bot) {
//				return true;
//			} else {
//				return pathContainsBotInteraction(user.src.incoming, bot)
//			}
//		}
//		return false;
//	}
//
//	/**
//	 * Rule G6: Reference "back to" must point to an element on the same path, at a previous position
//	 */
//	@Check
//	def loopsPath(BotInteraction interaction) {
//		if (interaction.backTo !== null) {
//			for (UserInteraction backTo : interaction.backTo) {
//				if (pathContainsUserInteraction(interaction, backTo) === false) {
//					error("G6\tBack to user interaction must be in the same path, previously",
//						GeneratorPackage.Literals.BOT_INTERACTION__BACK_TO)
//				}
//			}
//		}
//	}
//
//	def boolean pathContainsUserInteraction(BotInteraction bot, UserInteraction user) {
//		if (bot.incoming === user) {
//			return true;
//		} else {
//			if (bot.incoming.src !== null) {
//				return pathContainsUserInteraction(bot.incoming.src, user)
//			}
//		}
//		return false;
//	}
	/**
	 * Rule G7: Parameters in the training phrases must be defined in the same intent
	 */
	@Check
	def checkParameterReferences(ParameterReferenceToken references) {
		var container = references.eContainer
		if (!(container instanceof TrainingPhrase)) {
			return
		}
		var containercontainer = container.eContainer
		while (!(containercontainer instanceof Intent)) {
			containercontainer = containercontainer.eContainer
		}
		var trainingphrase = container as TrainingPhrase
		var intent = containercontainer as Intent
		if (!intent.parameters.contains(references.parameter)) {
			error("G7\tThe training phrase '" + trainingphrase + "' of the intent " + intent.name +
				" contains a reference to a parameter that is not defined in the intent parameters",
				GeneratorPackage.Literals.PARAMETER_REFERENCE_TOKEN__PARAMETER)
		}
	}

	/**
	 * Rule G8: All entries of the entity should be of the same type
	 */
	@Check
	def entityType(Entity entity) {
		var has_regex = false
		var has_simple = false
		var has_composite = false
		for (LanguageInput language : entity.inputs) {
			for (EntityInput input : language.inputs) {
				if (input instanceof RegexInput) {
					if (has_simple || has_composite) {
						error("G8\tThe entity " + entity.name +
							" only can have one entry type, regex, simple or composite",
							GeneratorPackage.Literals.ENTITY__INPUTS)
					}
					has_regex = true
				} else if (input instanceof SimpleInput) {
					if (has_regex || has_composite) {
						error("G8\tThe entity " + entity.name +
							"  only can have one entry type, regex, simple or composite",
							GeneratorPackage.Literals.ENTITY__INPUTS)
					}
					has_simple = true
				} else {
					if (has_regex || has_simple) {
						error("G8\tThe entity " + entity.name +
							" only can have one entry type, regex, simple or composite",
							GeneratorPackage.Literals.ENTITY__INPUTS)
					}
					has_composite = true
				}
			}
		}
	}

	/**
	 * Rule G9: There should be one LanguageInput per chatbot language
	 */
	@Check
	def allLanguages(Element element) {
		var aux = element.eContainer;
		while (!(aux instanceof Bot)) {
			aux = aux.eContainer;
		}
		var remove = true
		var bot = aux as Bot
		var othersLanguageInput = new ArrayList<WithLanguage>();
		if (element instanceof Entity) {
			var entity = element as Entity
			othersLanguageInput.addAll(entity.inputs)
			remove = false
		} else if (element instanceof Intent) {
			var intent = element as Intent
			if (!intent.isFallbackIntent) {
				remove = false
			}
			othersLanguageInput.addAll(intent.inputs);
		} else if (element instanceof Text) {
			var text = element as Text
			othersLanguageInput.addAll(text.inputs)
			remove = false
		} else if (element instanceof HTTPResponse) {
			var text = element as HTTPResponse
			othersLanguageInput.addAll(text.inputs)
			remove = false
		}
//		else if (element instanceof Parameter) {
//			var parameter = element as Parameter
//			othersLanguageInput.addAll(parameter.prompts)
//		}
		var languages = new ArrayList<Language>();
		for (WithLanguage input : othersLanguageInput) {
			if (input.language == Language.EMPTY) {
				input.language = bot.languages.get(0);
			}
			languages.add(input.language)
		}
		for (language : bot.languages) {
			if (!languages.contains(language)) {
				if (!remove) {
					getErrorG9(element, language)
				}
			}
		}
	}

	def getErrorG9(Element element, Language language) {
		if (element instanceof Entity) {
			var entity = element as Entity
			warning(
				"G9\tThe chatbot supports " + language.literal.toLowerCase().toFirstUpper + ", but the entity " +
					entity.name + " does not have an input in this language", GeneratorPackage.Literals.ELEMENT__NAME)
		} else if (element instanceof Intent) {
			var intent = element as Intent
			warning(
				"G9\tThe chatbot supports " + language.literal.toLowerCase().toFirstUpper + ", but the intent " +
					intent.name + " does not have an input in this language", GeneratorPackage.Literals.ELEMENT__NAME)
		} else if (element instanceof Text) {
			var text = element as Text
			warning(
				"G9\tThe chatbot supports " + language.literal.toLowerCase().toFirstUpper + ", but the text response " +
					text.name + " does not have an input in this language", GeneratorPackage.Literals.ELEMENT__NAME)
		} else if (element instanceof HTTPResponse) {
			var text = element as HTTPResponse
			warning(
				"G9\tThe chatbot supports " + language.literal.toLowerCase().toFirstUpper + ", but the HTTP response " +
					text.name + " does not have an input in this language", GeneratorPackage.Literals.ELEMENT__NAME)
		}
	}

	/**
	 * Rule G10: Regex syntax must be well-formed 
	 */
	@Check
	def regexSyntax(RegexInput input) {
		try {
			Pattern.compile(input.expresion)
		} catch (PatternSyntaxException exception) {
			var entity = input.eContainer.eContainer as Entity
			warning("G10\t Error in the regular expression " + input.expresion + " of entity " + entity.name + ": " +
				exception.description, GeneratorPackage.Literals.REGEX_INPUT__EXPRESION)
		}
	}

	/**
	 * Rule G11: The loop has not terminating branch
	 */
//	@Check
//	def loopsSeveralPaths(BotInteraction interaction) {
//		if (interaction.backTo !== null) {
//			if (!interaction.backTo.isEmpty) {
//				for (UserInteraction user : interaction.backTo) {
//					if (!hasStopCondition(user)) {
//						warning("G11\tThere is an endless loop, ensure there is at least one path with end",
//							GeneratorPackage.Literals.BOT_INTERACTION__BACK_TO)
//					}
//				}
//			}
//		}
//	}
//
//	def boolean hasStopCondition(UserInteraction user) {
//		if (user.target !== null) {
//			return hasStopCondition(user.target);
//		} else {
//			if (user.backTo !== null) {
//				return false;
//			} else {
//				return true;
//			}
//
//		}
//	}
	/**
	 * Rule G11: The loop has not terminating branch
	 */
//	@Check
//	def loopsSeveralPaths(UserInteraction interaction) {
//		if (interaction.backTo !== null) {
//			if (!hasStopCondition(interaction.backTo.backTo)) {
//				warning("G11\tThere is an endless loop, ensure there is at least one path with end",
//					GeneratorPackage.Literals.USER_INTERACTION__BACK_TO)
//			}
//		}
//	}
//
//	def boolean hasStopCondition(BotInteraction bot) {
//		if (bot.outcoming !== null && !bot.outcoming.isEmpty) {
//			for (UserInteraction user : bot.outcoming) {
//				if (hasStopCondition(user)) {
//					return true;
//				}
//			}
//			return false;
//		} else {
//			if (bot.backTo !== null && !bot.backTo.isEmpty) {
//				return false;
//			} else {
//				return true;
//			}
//
//		}
//	}
	/**
	 * Rule G12: Defined entities should be used in some parameter
	 */
	@Check
	def usedEntities(Entity entity) {
		var container = entity.eContainer;
		if (container instanceof Bot) {
			var bot = container as Bot
			if (!entity.isUsed(bot)) {
				warning("G12\tThe entity " + entity.name +
					" is never used in a parameter. Defined entities should be used in some parameter",
					GeneratorPackage.Literals.ELEMENT__NAME)
			}
		}
	}

	def isUsed(Entity entity, Bot bot) {
		for (Intent i : bot.intents) {
			for (Parameter p : i.parameters) {
				if (p.entity !== null && p.entity.equals(entity)) {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * Rule G13: Intents should be used in some flow
	 */
	@Check
	def usedIntents(Intent intent) {
		var container = intent.eContainer;
		if (container instanceof Bot) {
			var bot = container as Bot
			if (!intent.isUsed(bot)) {
				warning(
					"G13\tThe intent " + intent.name + " is never used in a flow. Intents should be used in some flow",
					GeneratorPackage.Literals.ELEMENT__NAME)
			}
		}
	}

	def isUsed(Intent intent, Bot bot) {
		for (UserInteraction f : bot.flows) {
			if (intent.isUsed(f)) {
				return true;
			}
		}
		return false;
	}

	def boolean isUsed(Intent intent, UserInteraction interaction) {
		if (interaction.intent.equals(intent)) {
			return true;
		}
		if (interaction.target !== null) {
			for (UserInteraction next : interaction.target.outcoming) {
				if (isUsed(intent, next)) {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * Rule G14: Mandatory Parameters should be used in some Training Phrase
	 */
	@Check
	def usedParameter(Parameter param) {
		var container = param.eContainer;
		if (container instanceof Intent) {
			var intent = container as Intent
			if (param.isRequired) {
				for (IntentLanguageInputs lanIntent : intent.inputs) {
					if (!param.isUsed(lanIntent)) {
						warning(
							"G14\tThe parameter " + param.name + " of the intent " + intent.name +
								" is mandatory and not used in training phrases in the inputs in " +
								lanIntent.language.literal.toLowerCase().toFirstUpper +
								". Mandatory parameters should be used in some training phrase",
							GeneratorPackage.Literals.ELEMENT__NAME)
					}
				}

			}
		}
	}

	def isUsed(Parameter param, IntentLanguageInputs lanIntent) {
		for (IntentInput ii : lanIntent.inputs) {
			if (ii instanceof TrainingPhrase) {
				var f = ii as TrainingPhrase
				for (Token token : f.tokens) {
					if (token instanceof ParameterReferenceToken) {
						var paramRef = token as ParameterReferenceToken
						if (paramRef.parameter.equals(param)) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}

	/**
	 * Rule G15: The LanguageIntent must contain at least three training phrases
	 */
	@Check
	def atLeastTreeTrainingPhrases(IntentLanguageInputs intentLan) {
		var intent = intentLan.eContainer as Intent
		if (intentLan.inputs.length < 3) {
			warning(
				"G15\tThe intent " + intent.name + " must contain at least tree training phrases in " +
					intentLan.language.literal.toLowerCase().toFirstUpper +
					". The intent must contain at least three training phrases for each language",
				GeneratorPackage.Literals.INTENT_LANGUAGE_INPUTS__INPUTS)
		}
	}

//	/**
//	 * Rule G16: Two Training Phrases should not be equals in different intent
//	 */
//	@Check
//	def similarPhrases(TrainingPhrase phrase) {
//		var bot = phrase.eContainer.eContainer.eContainer;
//		var intent = phrase.intent
//		if (bot instanceof Bot) {
//			var trainingPhrases = (bot as Bot).eAllContents.filter(TrainingPhrase).toList
//			for (tp : trainingPhrases) {
//				var intent2 = tp.intent
//				if (phrase.isSimilarTo(tp) && !phrase.equals(tp) && !intent.equals(intent2)) {
//					warning("G16\tTwo training phrases should not be equals in different intents",
//						GeneratorPackage.Literals.TRAINING_PHRASE__TOKENS)
//				}
//			}
//		}
//	}
	/**
	 * Rule G16: Two Training Phrases should not be equals in two start paths
	 */
	@Check
	def similarPhrases(UserInteraction interaction) {
		var intent = interaction.intent
		var bot = intent.eContainer as Bot

		if (interaction.src !== null) {
			for (UserInteraction user1 : interaction.src.outcoming) {
				if (!interaction.equals(user1)) {
					var list = hasSimilarTp(interaction.intent, user1.intent)
					if (!list.empty) {
						var str ="";
						for (TrainingPhrase tp: list){
							str+="'"+tp.toString+"' "
						}
						warning("G16\tThe intents " + interaction.intent.name + " and " + user1.intent.name +
							" are in a start of the path and contain "+ list.size +" training phrases equal. Two training phrases should not be equal in two start paths: "+str,
							GeneratorPackage.Literals.USER_INTERACTION__INTENT)
					}
				}

			}

		} else {
			for (UserInteraction user1 : bot.flows) {
				if (!interaction.equals(user1)) {
					var list = hasSimilarTp(interaction.intent, user1.intent)
					if (!list.empty) {
						var str ="";
						for (TrainingPhrase tp: list){
							str+="'"+tp.toString+"' "
						}
						warning("G16\tThe intents " + interaction.intent.name + " and " + user1.intent.name +
							" are in a start of the path and contain "+ list.size +" training phrases equal. Two training phrases should not be equal in two start paths: "+str,
							GeneratorPackage.Literals.USER_INTERACTION__INTENT)
					}
				}

			}
		}

	}

	def hasSimilarTp(Intent intent1, Intent intent2) {
		var trainingPhrases1 = intent1.eAllContents.filter(TrainingPhrase).toList
		var trainingPhrases2 = intent2.eAllContents.filter(TrainingPhrase).toList
		var list = new ArrayList<TrainingPhrase>
		for (TrainingPhrase tp1 : trainingPhrases1) {
			for (TrainingPhrase tp2 : trainingPhrases2) {
				if (tp1.isSimilarTo(tp2) && !list.contains(tp1)) {
					list.add(tp1)
				}
			}
		}
		return list;
	}

	def getIntent(TrainingPhrase phrase) {
		var eContainer = phrase.eContainer;
		while (!(eContainer instanceof Intent)) {
			eContainer = eContainer.eContainer
		}
		return eContainer as Intent
	}

	/**
	 * Rule G17: Two Training Phrases cannot be equals in the same intent
	 */
	@Check
	def similarPhrasesSameIntent(Intent intent) {
		var listOld = new ArrayList<TrainingPhrase>()
		var trainingPhrases = intent.eAllContents.filter(TrainingPhrase).toList
		for (tp : trainingPhrases) {
			for (phrase : trainingPhrases) {
				if (phrase.isSimilarTo(tp) && !phrase.equals(tp)) {
					if (!listOld.contains(tp) && !listOld.contains(phrase)) {
						warning("G17\tThe intent " + intent.name + " contains the training phrase '" + phrase +
							"' repeated. Two training phrases cannot be equal in the same intent",
							GeneratorPackage.Literals.INTENT__INPUTS)
						listOld.add(tp)
						listOld.add(phrase)
					}
				}
			}
		}
	}

	/**
	 * Rule G18: Training Phrases should contains something more than a text parameter
	 */
	@Check
	def trainingPhraseWithOnlyTextEntity(TrainingPhrase phrase) {
		var onlyTextEntity = true
		for (token : phrase.tokens) {
			if (token instanceof Literal) {
				onlyTextEntity = false;
			} else if (token instanceof ParameterReferenceToken) {
				if ((token as ParameterReferenceToken).parameter.entity !== null ||
					(token as ParameterReferenceToken).parameter.defaultEntity != DefaultEntity.TEXT) {
					onlyTextEntity = false;
				}
			}
		}
		if (onlyTextEntity) {
			warning("G18\tThe intent " + phrase.intent.name +
				" contains a training phrase with only a text parameter. Training phrases should contain something more than a text parameter",
				GeneratorPackage.Literals.TRAINING_PHRASE__TOKENS)
		}
	}

	/**
	 * Rule G19: The Chatbot should have a fallback intent
	 */
	@Check
	def fallBackIntent(Bot bot) {
		for (Intent intent : bot.intents) {
			if (intent.fallbackIntent) {
				return;
			}
		}
		warning("G19\tChatbot should contain at least one fallback intent", GeneratorPackage.Literals.BOT__INTENTS)

	}

	/**
	 * Rule G20: Mandatory parameters should have prompts
	 */
	@Check
	def parametersPrompt(Parameter param) {
		if (param.isRequired) {
			var aux = param.eContainer;
			while (!(aux instanceof Bot)) {
				aux = aux.eContainer;
			}
			var bot = aux as Bot
			var languages = new ArrayList<Language>();
			for (WithLanguage input : param.prompts) {
				if (input.language == Language.EMPTY) {
					input.language = bot.languages.get(0)
				}
				languages.add(input.language)
			}
			var intent = param.eContainer as Intent
			for (language : bot.languages) {
				if (!languages.contains(language)) {
					warning(
						"G20\tThe mandatory parameter " + param.name + " of the intent " + intent.name +
							" does no have prompts in " + language.literal.toLowerCase().toFirstUpper +
							". Mandatory parameters should have prompts", GeneratorPackage.Literals.ELEMENT__NAME)
				}
			}
		}
	}

	/**
	 * Rule G20: Button text should be a training phrase of an intent
	 */
//	@Check
//	def buttonText(Button button) {
//		
//	}
	@Check
	def checkHTTTPRequestTokenDataKey(HTTPRequestToke httpRequestToken) {
		if (httpRequestToken.type != HTTPReturnType.DATA && !httpRequestToken.dataKey.isEmpty) {
			error('The data key is only using with the data type of http request',
				GeneratorPackage.Literals.HTTP_REQUEST_TOKE__DATA_KEY, "invalid data key")
		}
	}

	@Check
	def paramEntity(Parameter param) {
		if (param.entity === null && param.defaultEntity === null) {
			var intent = param.eContainer
			if (intent instanceof Intent) {
				var index = intent.parameters.indexOf(param)
				if (index == intent.parameters.size - 1) {
					error("The parameter must have a entity", GeneratorPackage.Literals.PARAMETER__ENTITY)
					return;
				}
				var stop = false
				do {
					var param2 = intent.parameters.get(index + 1)
					if (param2.entity !== null || param2.defaultEntity !== null) {
						stop = true;
						param.entity = param2.entity;
						param.defaultEntity = param2.defaultEntity;
						param.isList = param2.isList
						param.required = param2.isRequired
						for (PromptLanguage prompt : param2.prompts) {
							var prompt2 = GeneratorFactory.eINSTANCE.createPromptLanguage
							prompt2.language = prompt.language
							for (String s : prompt.prompts) {
								prompt2.prompts.add(s)
							}
							param.prompts.add(prompt2)
						}
					}
					index++;
					if (index == intent.parameters.size) {
						stop = true;
					}
				} while (!stop)
				if (param.entity === null && param.defaultEntity === null) {
					error("The parameter must have a entity", GeneratorPackage.Literals.PARAMETER__ENTITY)
					return;
				}
			}
		}
	}
}
